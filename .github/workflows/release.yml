name: Build from source and make a new release on GitHub

on:
  push:
    branches:
      - main
    tags:
      - "v*"

jobs:
  generate-linux:
    name: Generate Linux binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/setup-go@v1
        with:
          go-version: "1.17.1"

      - name: Build from source
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w" -o ./bin/wait-for-it
        
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: wait-for-it
          path: ./bin/wait-for-it

  generate-windows:
    name: Generate Windows binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/setup-go@v1
        with:
          go-version: "1.17.1"

      - name: Build from source
        run: |
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags "-s -w" -o ./bin/wait-for-it_win64.exe
      
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: wait-for-it_windows
          path: ./bin/wait-for-it_win64.exe

  generate-mac:
    name: Generate MacOS binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/setup-go@v1
        with:
          go-version: "1.17.1"

      - name: Build from source
        run: |
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags "-s -w" -o ./bin/wait-for-it_mac

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: wait-for-it_mac
          path: ./bin/wait-for-it_mac


  release:
    name: Release and Upload Asset
    runs-on: ubuntu-latest
    needs: [generate-linux, generate-windows, generate-mac]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: wait-for-it
          path: ./bin
      
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: wait-for-it_windows
          path: ./bin
      
      - name: Download MacOS Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: wait-for-it_mac
          path: ./bin


      - name: Increment version
        id: increment_version
        run: |
          git config --global user.email "roerohan@gmail.com"
          git config --global user.name "roerohan"

          wget https://gist.githubusercontent.com/roerohan/17e08ee9ed42d97bb841033b038117bd/raw/3e73b37c5f3a3c48fc9cf6d35e52f123dea0438b/gitautotag.sh
          chmod +x ./gitautotag.sh
          ./gitautotag.sh --bug

          echo "VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "VERSION=$VERSION"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            The binary executable compiled using the following command:
            CGO_ENABLED=0 GOOS={os} GOARCH=amd64 go build -ldflags "-s -w" -o ./bin/wait-for-it_{os}

            For any other Operating System, you can run the command above with your OS and ARCH to generate a binary.

          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        run: |
          hub release edit -a ./bin/wait-for-it -a ./bin/wait-for-it_mac -a ./bin/wait-for-it_win64.exe -m "" ${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
